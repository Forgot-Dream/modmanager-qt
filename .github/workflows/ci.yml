name: CI

on:
  push:
    paths:
      - "*.pro"
      - "*.nsi"
      - "src/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "*.pro"
      - "*.nsi"
      - "src/**"
      - ".github/workflows/ci.yml"
jobs:
  build-on-ubuntu:
    name: Build On Ubuntu
    runs-on: ubuntu-latest # for libaria2-0 available
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: 5.15.2
          cached: "false"
          modules: qtwebengine
      - name: ubuntu install packages
        run: |
          sudo apt update
          sudo apt-get install -y libglew-dev libglfw3-dev
          sudo apt-get install -y libaria2-0-dev libquazip5-dev
          sudo apt install -y libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
          sudo apt install -y libprotobuf-dev protobuf-compiler protobuf-c-compiler libgrpc++-dev protobuf-compiler-grpc ninja-build fcitx-frontend-qt5 libcurl4-openssl-dev
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set Env
        run: |
          export VERSION=$(grep -o '".*"' src/version.h | sed 's/"//g')
          export RELEASE_TEXT=$(grep -Pzo "### ${VERSION}\n(\n|.)+?\n##" Changelog.md | sed '$ d')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "RELEASE_TEXT<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_TEXT}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: build ubuntu
        run: |
          qmake
          make
      #- name: Release Text
        #if: startsWith(github.event.ref, 'refs/tags/')
        #uses: svenstaro/upload-release-action@v2
        #with:
          #repo_token: ${{ secrets.GITHUB_TOKEN }}
          #tag: ${{ github.ref }}
          #body: ${{ env.RELEASE_TEXT }}
      #- name: package
        #run: |
          #make INSTALL_ROOT=appdir -j2 install ; find appdir/
          #wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          #chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          #./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop \
            #-exclude-libs=libQt5Pdf.so,libQt5Qml.so,libQt5QmlModels.so,libQt5Quick.so,libQt5VirtualKeyboard.so \
            #-bundle-non-qt-libs \
            #--appimage-extract-and-run
          #wget -c -nv https://github.com/AppImage/AppImageKit/releases/download/12/appimagetool-x86_64.AppImage
          #chmod +x appimagetool-x86_64.AppImage
          #./appimagetool-x86_64.AppImage appdir --appimage-extract-and-run
      #- uses: actions/upload-artifact@v2
        #with:
          #name: Mod_Manager-${{ env.VERSION }}-x86_64.AppImage
          #path: Mod_Manager*.AppImage

  build-on-win-mingw:
    name: Build On Windows Mingw
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win32_mingw81
            qt_ver: 5.15.2
            qt_tools: "tools_mingw,8.1.0-1-202004170606,qt.tools.win32_mingw810"
            qt_tools_mingw_install: mingw810_32
            mingw_arch: mingw32
            msys_arch: i686
            x64_suffix:
          - qt_arch: win64_mingw81
            qt_ver: 5.15.2
            qt_tools: "tools_mingw,8.1.0-1-202004170606,qt.tools.win64_mingw810"
            qt_tools_mingw_install: mingw810_64
            mingw_arch: mingw64
            msys_arch: x86_64
            x64_suffix: -x64
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          cached: "false"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install dependencies
        shell: powershell
        run: |
          C:/msys64/usr/bin/pacman -S mingw-w64-${{ matrix.msys_arch }}-aria2 --noconfirm
          C:/msys64/usr/bin/pacman -S mingw-w64-${{ matrix.msys_arch }}-quazip --noconfirm
      - name: Qt 5 environment configuration
        if: ${{ startsWith( matrix.qt_ver, 5 ) }}
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: where is qmake & where is mingw32-make
        shell: pwsh
        run: |
          Get-Command -Name 'qmake' | Format-List
          Get-Command -Name 'mingw32-make' | Format-List
      - name: mingw-build
        id: build
        shell: cmd
        run: |
          qmake
          mingw32-make.exe qmake_all
          mingw32-make.exe
      - name: package
        id: package
        shell: pwsh
        run: |
          mkdir deploy && mkdir deploy/bin
          mv release/${{github.event.repository.name}}.exe deploy/bin
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libcrypto-1_1${{ matrix.x64_suffix }}.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libssl-1_1${{ matrix.x64_suffix }}.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libaria2-0.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libquazip5.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libiconv-2.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/liblzma-5.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libintl-8.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/zlib1.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libcares-4.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libstdc++-6.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libsqlite3-0.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libssh2-1.dll deploy/bin/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libxml2-2.dll deploy/bin/
          cp -r C:/msys64/${{ matrix.mingw_arch }}/ssl deploy/ssl
          windeployqt.exe --no-translations --no-opengl-sw --no-system-d3d-compiler --no-angle --no-quick-import --qmldir "${{ env.Qt5_DIR }}/qml" deploy/bin/${{github.event.repository.name}}.exe
      - name: x64 dependencies
        if: contains(matrix.mingw_arch, 'mingw64')
        run : |
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libgcc_s_seh-1.dll deploy/bin/
      - name: x32 dependencies
        if: contains(matrix.mingw_arch, 'mingw32')
        run : |
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libgcc_s_dw2-1.dll deploy/bin/
      - name: Create installer
        run:
          makensis modmanager.nsi
      - uses: actions/upload-artifact@v2
        with:
          name: ModManager${{ matrix.x64_suffix }}-Installer.exe
          path: ${{github.workspace}}/ModManager-Installer.exe
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{github.workspace}}/ModManager${{ matrix.x64_suffix }}-Installer.exe
          asset_name: ModManager${{ matrix.x64_suffix }}-Installer.exe
          tag: ${{ github.ref }}
          overwrite: true
  # enable them if find a way to build libaria2
  #build-on-win-msvc:
    #name: Build On Windows MSVC
    #runs-on: windows-latest
    #strategy:
      #matrix:
        #include:
          #- qt_ver: 5.15.2
          #qt_arch: win32_msvc2019
          #msvc_arch: x86
          #qt_arch_install: msvc2019
          #openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win32.zip"
          #- qt_ver: 5.15.2
            #qt_arch: win64_msvc2019_64
            #msvc_arch: x64
            #qt_arch_install: msvc2019_64
            #openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win64.zip"
    #steps:
      #- name: Install Qt
        #uses: jurplel/install-qt-action@v2.13.0
        #with:
          #version: ${{ matrix.qt_ver }}
          #arch: ${{ matrix.qt_arch }}
          #tools: ${{ matrix.qt_tools }}
          #cached: "false"
      #- uses: actions/checkout@v2
        #with:
          #fetch-depth: 1
          #submodules: recursive
      #- name: Install zlib 32
        #if: contains(matrix.qt_arch, 'win32_msvc')
        #shell: pwsh
        #run: |
          #set ARCH=Win32
          #Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat
          #./install_zlib.bat
          #del install_zlib.bat
      #- name: Install zlib
        #if: contains(matrix.qt_arch, 'win64_msvc')
        #shell: pwsh
        #run: |
          #Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat
          #./install_zlib.bat
          #del install_zlib.bat
      #- name: Test zlib
        #shell: cmd
        #run: |
          #if NOT exist "%PROGRAMFILES%"\zlib\lib\zlib.lib exit 1
          #if NOT exist "%PROGRAMFILES%"\zlib\bin\zlib.dll exit 1
          #if NOT exist "%PROGRAMFILES%"\zlib\include\zconf.h exit 1
          #if NOT exist "%PROGRAMFILES%"\zlib\include\zlib.h exit 1
          #if NOT exist "%PROGRAMFILES%"\zlib\lib\zlib.lib exit 1
      #- name: Install aria2
        #shell: powershell
        #run: |
          #C:/msys64/usr/bin/pacman -S mingw-w64-x86_64-aria2 --noconfirm
      #- name: msvc-build
        #id: build
        #shell: cmd
        #run: |
          #call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          #qmake
          #nmake
          #echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          #echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          #echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          #echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      #- name: Perpare package
        #shell: pwsh
        #run: |
          #mkdir deploy && mv release/${{github.event.repository.name}}.exe deploy
          #$client = new-object System.Net.WebClient
          #$client.DownloadFile('${{ matrix.openssl_url }}', 'openssl-bin.zip')
          #Expand-Archive -Path openssl-bin.zip -DestinationPath openssl
          #cp openssl/*.dll deploy/
          #cp C:/msys64/mingw64/bin/libaria2-0.dll deploy/
          #cp LICENSE* deploy/
          #cp *md deploy/
      #- name: Copy zlib 32
        #if: contains(matrix.qt_arch, 'win32_msvc')
        #shell: pwsh
        #run: |
          #cp "C:/Program Files (x86)/zlib/bin/zlib.dll" deploy/
      #- name: Copy zlib
        #if: contains(matrix.qt_arch, 'win64_msvc')
        #shell: pwsh
        #run: |
          #cp "C:/Program Files/zlib/bin/zlib.dll" deploy/
      #- name: package
        #id: package
        #shell: pwsh
        #run: |
          #windeployqt.exe --no-translations --no-opengl-sw --no-system-d3d-compiler --no-angle --no-quick-import --qmldir "${{ env.Qt5_DIR }}/qml" deploy/${{github.event.repository.name}}.exe
      #- uses: actions/upload-artifact@v2
        #with:
          #name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}
          #path: ${{github.workspace}}/deploy/

      #- name: Create zip
        #id: createzip
        #shell: pwsh
        #run: |
          #Compress-Archive -LiteralPath ${{github.workspace}}/deploy -DestinationPath ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip

      #- name: Upload Release
        #if: startsWith(github.event.ref, 'refs/tags/')
        #uses: svenstaro/upload-release-action@v2
        #with:
          #repo_token: ${{ secrets.GITHUB_TOKEN }}
          #file: ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          #asset_name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          #tag: ${{ github.ref }}
          #overwrite: true

  build-on-osx:
    name: Build On OSX
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15]
        qt_ver: [5.15.2]
        qt_arch: [clang_64]
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          cached: "false"
      - name: Install libaria2
        run: |
          wget "https://github.com/kaniol-lck/aria2/releases/download/libaria2-release-1.36.0/libaria2-clang-macos-10.15.zip"
          unzip *.zip
          sudo cp -r lib/* /usr/local/lib/
          sudo cp -r include/ /usr/local/include
          rm -rf lib/ include/ *.zip
      - name: Install dependencies
        run: |
          brew install quazip
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: build macos
        run: |
          qmake
          make
      - name: package
        run: |
          macdeployqt modmanager.app -qmldir=. -verbose=1 -dmg
        shell: sh
      - uses: actions/upload-artifact@v2
        with:
          name: ModManager_${{ matrix.os }}_${{matrix.qt_ver}}.dmg
          path: modmanager.dmg
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: modmanager.dmg
          asset_name: ModManager_${{ matrix.os }}_${{ matrix.qt_ver }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
